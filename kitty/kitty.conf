# vim:fileencoding=utf-8:foldmethod=marker

	font_family      FiraCode Nerd Font
	bold_font        auto
	italic_font      auto
	bold_italic_font auto
	font_size 11.0
     #: force_ltr no
	disable_ligatures never
	modify_font underline_position 9
	modify_font underline_thickness 150%
	modify_font strikethrough_position 2px
     #: modify_font cell_width 80%
     #: modify_font cell_height -2px
     #: modify_font baseline 3
	box_drawing_scale 0.001, 1, 1.5, 2
	undercurl_style thin-sparse
     #: text_composition_strategy platform
     #: text_fg_override_threshold 0

	cursor none
	cursor_text_color background
	cursor_shape block
	cursor_shape_unfocused underline
	cursor_underline_thickness 2.0
	cursor_blink_interval 0
	cursor_stop_blinking_after 0

	scrollback_lines 2000
	scrollback_indicator_opacity 1.0
	scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER
	scrollback_pager_history_size 0
	scrollback_fill_enlarged_window no
	#wheel_scroll_multiplier 5.0
	wheel_scroll_min_lines 1
	touch_scroll_multiplier 1.0

	mouse_hide_wait 2.0
	#url_color 0087bdaa
	url_style curly
	open_url_with default
	# url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh
	detect_urls yes
	#url_excluded_characters
	# show_hyperlink_targets no
	underline_hyperlinks hover
	copy_on_select no
	# paste_actions quote-urls-at-prompt,confirm
	strip_trailing_spaces never
	select_by_word_characters @-./_~?&=%+#
	#select_by_word_characters_forward
	click_interval -1.0
	focus_follows_mouse no
	pointer_shape_when_grabbed arrow
	default_pointer_shape beam
	pointer_shape_when_dragging beam
		# clear_all_mouse_actions no
		mouse_map left click ungrabbed mouse_handle_click selection link prompt
		mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt
		mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link
		mouse_map ctrl+shift+left press grabbed discard_event
		# mouse_map left press ungrabbed mouse_selection normal
		# mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle

	repaint_delay 10
	input_delay 3
	sync_to_monitor yes

	enable_audio_bell no
	visual_bell_duration 0.0
	visual_bell_color none
	window_alert_on_bell yes
	bell_on_tab "ðŸ”” "
	command_on_bell none
	bell_path none
	linux_bell_theme __custom

	remember_window_size  yes
	initial_window_width  640
	initial_window_height 400
	enabled_layouts *
	window_resize_step_cells 2
	window_resize_step_lines 2
	window_border_width 0.5pt
	draw_minimal_borders yes
	window_margin_width 0
	single_window_margin_width -1
	window_padding_width 0
	single_window_padding_width 0
	placement_strategy center
	#active_border_color 00ff00
	#inactive_border_color cccccc
	#bell_border_color ff5a00
	inactive_text_alpha 1.0
	hide_window_decorations no
	window_logo_path none
	window_logo_position bottom-right
	window_logo_alpha 0.5
	window_logo_scale 0
	resize_debounce_time 0.1 0.5
	resize_in_steps no
	visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ
	confirm_os_window_close -1

	tab_bar_edge bottom
	tab_bar_margin_width 0.0
	tab_bar_margin_height 0.0 0.0
	tab_bar_style powerline
	tab_bar_align left
	tab_bar_min_tabs 2
	tab_switch_strategy previous
	tab_fade 0.25 0.5 0.75 1
	tab_separator " â”‡"
	tab_powerline_style angled
	tab_activity_symbol none
	tab_title_max_length 0
	tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{title}"
	active_tab_title_template none
	active_tab_foreground   #000
	active_tab_background   #eee
	active_tab_font_style   bold-italic
	inactive_tab_foreground #444
	inactive_tab_background #999
	inactive_tab_font_style normal
	tab_bar_background none
	tab_bar_margin_color none

	foreground #dddddd
	background #000000
	background_opacity 0.8
	background_blur 0
	background_image none
	background_image_layout tiled
	background_image_linear no
	dynamic_background_opacity no
	background_tint 0.0
	background_tint_gaps 1.0
	dim_opacity 0.4
	selection_foreground #000000
	selection_background #fffacd
		# color0 #000000
		# color8 #767676
		#: black
		# color1 #cc0403
		# color9 #f2201f
		#: red
		# color2  #19cb00
		# color10 #23fd00
		#: green
		# color3  #cecb00
		# color11 #fffd00
		#: yellow
		# color4  #0d73cc
		# color12 #1a8fff
		#: blue
		# color5  #cb1ed1
		# color13 #fd28ff
		#: magenta
		# color6  #0dcdcd
		# color14 #14ffff
		#: cyan
		# color7  #dddddd
		# color15 #ffffff
		#: white
		# mark1_foreground black
		#: Color for marks of type 1
		# mark1_background #98d3cb
		#: Color for marks of type 1 (light steel blue)
		# mark2_foreground black
		#: Color for marks of type 2
		# mark2_background #f2dcd3
		#: Color for marks of type 1 (beige)
		# mark3_foreground black
		#: Color for marks of type 3
		# mark3_background #f274bc
		#: Color for marks of type 3 (violet)

	shell .
	editor vim
	close_on_child_death no
	remote_control_password "40501" get-colors set-colors focus-window focus-tab
	remote_control_password "40501" set-tab-* resize-*
	allow_remote_control password
	listen_on none
	#env
	# exe_search_path
	update_check_interval 24
	# startup_session none
	# clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask
	# clipboard_max_size 512
	# file_transfer_confirmation_bypass
	# allow_hyperlinks yes
	# shell_integration enabled
	# allow_cloning ask
	# clone_source_strategies venv,conda,env_var,path
	# notify_on_cmd_finish never
	# term xterm-kitty
	# terminfo_type path
	# forward_stdio no
	# menu_map

	wayland_titlebar_color system
	# macos_titlebar_color system
	# macos_option_as_alt no
	# macos_hide_from_tasks no
	# macos_quit_when_last_window_closed no
	# macos_window_resizable yes
	# macos_thicken_font 0
	# macos_traditional_fullscreen no
	# macos_show_window_title_in all
	# macos_menubar_title_max_length 0
	# macos_custom_beam_cursor no
	# macos_colorspace srgb
	linux_display_server wayland

	# kitty_mod ctrl+shift
	clear_all_shortcuts no
	# action_alias
	# kitten_alias
	# map kitty_mod+c copy_to_clipboard
	# map cmd+c       copy_to_clipboard
	# map kitty_mod+v paste_from_clipboard
	# map cmd+v       paste_from_clipboard
	# map kitty_mod+s  paste_from_selection
	# map shift+insert paste_from_selection
	# map kitty_mod+o pass_selection_to_program
	#::      map kitty_mod+o pass_selection_to_program firefox
	#::      map kitty_mod+y new_window less @selection

	# map kitty_mod+up    scroll_line_up
	# map kitty_mod+k     scroll_line_up
	# map opt+cmd+page_up scroll_line_up
	# map cmd+up          scroll_line_up
	# map kitty_mod+down    scroll_line_down
	# map kitty_mod+j       scroll_line_down
	# map opt+cmd+page_down scroll_line_down
	# map cmd+down          scroll_line_down
	# map kitty_mod+page_up scroll_page_up
	# map cmd+page_up       scroll_page_up
	# map kitty_mod+page_down scroll_page_down
	# map cmd+page_down       scroll_page_down
	# map kitty_mod+home scroll_home
	# map cmd+home       scroll_home
	# map kitty_mod+end scroll_end
	# map cmd+end       scroll_end
	# map kitty_mod+z scroll_to_prompt -1
	# map kitty_mod+x scroll_to_prompt 1
	# map kitty_mod+h show_scrollback
	# map kitty_mod+g show_last_command_output

	# map kitty_mod+enter new_window
	# map cmd+enter       new_window
	# map kitty_mod+n new_os_window
	# map cmd+n       new_os_window
	# map kitty_mod+w close_window
	# map shift+cmd+d close_window
	# map kitty_mod+] next_window
	# map kitty_mod+[ previous_window
	# map kitty_mod+f move_window_forward
	# map kitty_mod+b move_window_backward
	# map kitty_mod+` move_window_to_top
	# map kitty_mod+r start_resizing_window
	# map cmd+r       start_resizing_window
	# map kitty_mod+1 first_window
	# map cmd+1       first_window
	# map kitty_mod+2 second_window
	# map cmd+2       second_window
	# map kitty_mod+3 third_window
	# map cmd+3       third_window
	# map kitty_mod+4 fourth_window
	# map cmd+4       fourth_window
	# map kitty_mod+5 fifth_window
	# map cmd+5       fifth_window
	# map kitty_mod+6 sixth_window
	# map cmd+6       sixth_window
	# map kitty_mod+7 seventh_window
	# map cmd+7       seventh_window
	# map kitty_mod+8 eighth_window
	# map cmd+8       eighth_window
	# map kitty_mod+9 ninth_window
	# map cmd+9       ninth_window
	# map kitty_mod+0 tenth_window
	# map kitty_mod+f7 focus_visible_window
	# map kitty_mod+f8 swap_with_window

	# map kitty_mod+right next_tab
	# map shift+cmd+]     next_tab
	# map ctrl+tab        next_tab
	# map kitty_mod+left previous_tab
	# map shift+cmd+[    previous_tab
	# map ctrl+shift+tab previous_tab
	# map kitty_mod+t new_tab
	# map cmd+t       new_tab
	# map kitty_mod+q close_tab
	# map cmd+w       close_tab
	# map shift+cmd+w close_os_window
	# map kitty_mod+. move_tab_forward
	# map kitty_mod+, move_tab_backward
	# map kitty_mod+alt+t set_tab_title
	# map shift+cmd+i     set_tab_title
	#:     map ctrl+alt+1 goto_tab 1
	#:     map ctrl+alt+2 goto_tab 2
	#:     map ctrl+t new_tab !neighbor [optional cmd to run]

	# map kitty_mod+l next_layout
	#:     map ctrl+alt+t goto_layout tall
	#:     map ctrl+alt+s goto_layout stack
	#:     map ctrl+alt+p last_used_layout
	#:     map ctrl+alt+z toggle_layout stack

	# map kitty_mod+equal  change_font_size all +2.0
	# map kitty_mod+plus   change_font_size all +2.0
	# map kitty_mod+kp_add change_font_size all +2.0
	# map cmd+plus         change_font_size all +2.0
	# map cmd+equal        change_font_size all +2.0
	# map shift+cmd+equal  change_font_size all +2.0
	# map kitty_mod+minus       change_font_size all -2.0
	# map kitty_mod+kp_subtract change_font_size all -2.0
	# map cmd+minus             change_font_size all -2.0
	# map shift+cmd+minus       change_font_size all -2.0
	# map kitty_mod+backspace change_font_size all 0
	# map cmd+0               change_font_size all 0
	#:     map kitty_mod+f6 change_font_size all 10.0
	#:     map kitty_mod+f6 change_font_size current 10.0


	#: Use the hints kitten to select text and either pass it to an
	#: external program or insert it into the terminal or copy it to the
	#: clipboard.
	#: Open URL
	# map kitty_mod+e open_url_with_hints
	#::  Open a currently visible URL using the keyboard. The program used
	#::  to open the URL is specified in open_url_with.
	#: Insert selected path
	# map kitty_mod+p>f kitten hints --type path --program -
	#::  Select a path/filename and insert it into the terminal. Useful,
	#::  for instance to run git commands on a filename output from a
	#::  previous git command.
	#: Open selected path
	# map kitty_mod+p>shift+f kitten hints --type path
	#::  Select a path/filename and open it with the default open program.
	#: Insert selected line
	# map kitty_mod+p>l kitten hints --type line --program -
	#::  Select a line of text and insert it into the terminal. Useful for
	#::  the output of things like: `ls -1`.
	#: Insert selected word
	# map kitty_mod+p>w kitten hints --type word --program -
	#::  Select words and insert into terminal.
	#: Insert selected hash
	# map kitty_mod+p>h kitten hints --type hash --program -
	#::  Select something that looks like a hash and insert it into the
	#::  terminal. Useful with git, which uses SHA1 hashes to identify
	#::  commits.
	#: Open the selected file at the selected line
	# map kitty_mod+p>n kitten hints --type linenum
	#::  Select something that looks like filename:linenum and open it in
	#::  your default editor at the specified line number.
	#: Open the selected hyperlink
	# map kitty_mod+p>y kitten hints --type hyperlink
	#::  Select a hyperlink (i.e. a URL that has been marked as such by
	#::  the terminal program, for example, by `ls --hyperlink=auto`).
	#: The hints kitten has many more modes of operation that you can map
	#: to different shortcuts. For a full description see hints kitten
	#: <https://sw.kovidgoyal.net/kitty/kittens/hints/>.

	# map kitty_mod+f1 show_kitty_doc overview
	# map kitty_mod+f11 toggle_fullscreen
	# map ctrl+cmd+f    toggle_fullscreen
	# map kitty_mod+f10 toggle_maximized
	# map opt+cmd+s toggle_macos_secure_keyboard_entry
	# map kitty_mod+u    kitten unicode_input
	# map ctrl+cmd+space kitten unicode_input
	# map kitty_mod+f2 edit_config_file
	# map cmd+,        edit_config_file
	# map kitty_mod+escape kitty_shell window
	# map kitty_mod+a>m set_background_opacity +0.1
	# map kitty_mod+a>l set_background_opacity -0.1
	# map kitty_mod+a>1 set_background_opacity 1
	# map kitty_mod+a>d set_background_opacity default
	# map kitty_mod+delete clear_terminal reset active
	# map opt+cmd+r        clear_terminal reset active
	#::      # Reset the terminal
	#::      map f1 clear_terminal reset active
	#::      # Clear the terminal screen by erasing all contents
	#::      map f1 clear_terminal clear active
	#::      # Clear the terminal scrollback by erasing it
	#::      map f1 clear_terminal scrollback active
	#::      # Scroll the contents of the screen into the scrollback
	#::      map f1 clear_terminal scroll active
	#::      # Clear everything on screen up to the line with the cursor or the start of the current prompt (needs shell integration)
	#::      map f1 clear_terminal to_cursor active
	#::      # Same as above except cleared lines are moved into scrollback
	#::      map f1 clear_terminal to_cursor_scroll active
	#::  If you want to operate on all kitty windows instead of just the
	#::  current one, use all instead of active.
	#::  Some useful functions that can be defined in the shell rc files
	#::  to perform various kinds of clearing of the current window:
	#::  .. code-block:: sh
	#::      clear-only-screen() {
	#::          printf "\e[H\e[2J"
	#::      }
	#::      clear-screen-and-scrollback() {
	#::          printf "\e[H\e[3J"
	#::      }
	#::      clear-screen-saving-contents-in-scrollback() {
	#::          printf "\e[H\e[22J"
	#::      }
	#::  For instance, using these escape codes, it is possible to remap
	#::  Ctrl+L to both scroll the current screen contents into the
	#::  scrollback buffer and clear the screen, instead of just clearing
	#::  the screen. For ZSH, in ~/.zshrc, add:
	#::  .. code-block:: zsh
	#::      ctrl_l() {
	#::          builtin print -rn -- $'\r\e[0J\e[H\e[22J' >"$TTY"
	#::          builtin zle .reset-prompt
	#::          builtin zle -R
	#::      }
	#::      zle -N ctrl_l
	#::      bindkey '^l' ctrl_l
	#::  Alternatively, you can just add map ctrl+l clear_terminal
	#::  to_cursor_scroll active to kitty.conf which works with no changes
	#::  to the shell rc files, but only clears up to the prompt, it does
	#::  not clear anytext at the prompt itself.
	#: Clear up to cursor line
	# map cmd+k clear_terminal to_cursor active
	#: Reload kitty.conf
	# map kitty_mod+f5 load_config_file
	# map ctrl+cmd+,   load_config_file
	#::  Reload kitty.conf, applying any changes since the last time it
	#::  was loaded. Note that a handful of options cannot be dynamically
	#::  changed and require a full restart of kitty. Particularly, when
	#::  changing shortcuts for actions located on the macOS global menu
	#::  bar, a full restart is needed. You can also map a keybinding to
	#::  load a different config file, for example::
	#::      map f5 load_config /path/to/alternative/kitty.conf
	#::  Note that all options from the original kitty.conf are discarded,
	#::  in other words the new configuration *replace* the old ones.
	#: Debug kitty configuration
	# map kitty_mod+f6 debug_config
	# map opt+cmd+,    debug_config
	#::  Show details about exactly what configuration kitty is running
	#::  with and its host environment. Useful for debugging issues.
	#: Send arbitrary text on key presses
	#::  E.g. map ctrl+shift+alt+h send_text all Hello World
	#::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
	#::  client program when pressing specified shortcut keys. For
	#::  example::
	#::      map ctrl+alt+a send_text all Special text
	#::  This will send "Special text" when you press the Ctrl+Alt+A key
	#::  combination. The text to be sent decodes ANSI C escapes
	#::  <https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-
	#::  Quoting.html> so you can use escapes like \e to send control
	#::  codes or \u21fb to send Unicode characters (or you can just input
	#::  the Unicode characters directly as UTF-8 text). You can use
	#::  `kitten show_key` to get the key escape codes you want to
	#::  emulate.
	#::  The first argument to send_text is the keyboard modes in which to
	#::  activate the shortcut. The possible values are normal,
	#::  application, kitty or a comma separated combination of them. The
	#::  modes normal and application refer to the DECCKM cursor key mode
	#::  for terminals, and kitty refers to the kitty extended keyboard
	#::  protocol. The special value all means all of them.
	#::  Some more examples::
	#::      # Output a word and move the cursor to the start of the line (like typing and pressing Home)
	#::      map ctrl+alt+a send_text normal Word\e[H
	#::      map ctrl+alt+a send_text application Word\eOH
	#::      # Run a command at a shell prompt (like typing the command and pressing Enter)
	#::      map ctrl+alt+a send_text normal,application some command with arguments\r
	#: Open kitty Website
	# map shift+cmd+/ open_url https://sw.kovidgoyal.net/kitty/
	#: Hide macOS kitty application
	# map cmd+h hide_macos_app
	#: Hide macOS other applications
	# map opt+cmd+h hide_macos_other_apps
	#: Minimize macOS window
	# map cmd+m minimize_macos_window
	#: Quit kitty
	# map cmd+q quit
